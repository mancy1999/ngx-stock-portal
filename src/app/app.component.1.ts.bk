import { Component, ViewChild, ElementRef } from '@angular/core';
import { NgxEchartsService } from 'ngx-echarts';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {

  @ViewChild('chart') chart: ElementRef;

  echartsIntance: any;

  hours = [];
  days_dataSource = [{
    name: 'Monday',
    value: '1',
    color: 'pink'
  }, {
    name: 'Tuesday',
    value: '2',
    color: 'red'
  }, {
    name: 'Wednesday',
    value: '3',
    color: 'orange'
  }, {
    name: 'Thursday',
    value: '4',
    color: 'green'
  }, {
    name: 'Friday',
    value: '5',
    color: 'cyan'
  }, {
    name: 'Saturday',
    value: '6',
    color: 'blue'
  }, {
    name: 'Sunday',
    value: '7',
    color: 'purple'
  }];

  days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
  // y x  value
  data = [];

  chartOption3D = {
    tooltip: {},
    visualMap: {
      max: 1000,
      inRange: {
        color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']
      }
    },
    xAxis3D: {
      type: 'category',
      data: []
    },
    yAxis3D: {
      type: 'category',
      data: []
    },
    zAxis3D: {
      type: 'value',
      data: []
    },
    grid3D: {
      boxWidth: 200,
      boxDepth: 80,
      light: {
        main: {
          intensity: 1.2
        },
        ambient: {
          intensity: 0.3
        }
      }
    },
    series: [{
      type: 'bar3D',
      data: [],
      // data: this.data.map(function (item) {
      //   return {
      //     value: [item[1], item[0], item[2]]
      //   };
      // }),
      shading: 'color',

      label: {
        show: false,
        textStyle: {
          fontSize: 16,
          borderWidth: 1
        }
      },

      itemStyle: {
        opacity: 0.4
      },

      emphasis: {
        label: {
          textStyle: {
            fontSize: 20,
            color: '#900'
          }
        },
        itemStyle: {
          color: '#900'
        }
      }
    }]
  };

  chartOption = {
    title: {
      text: '堆叠区域图'
    },
    tooltip: {
      trigger: 'axis'
    },
    legend: {
      data: ['邮件营销', '联盟广告', '视频广告', '直接访问', '搜索引擎']
    },
    toolbox: {
      feature: {
        saveAsImage: {}
      }
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: [
      {
        type: 'category',
        boundaryGap: false,
        data: ['周一', '周二', '周三', '周四', '周五', '周六', '周日']
      }
    ],
    yAxis: [
      {
        type: 'value'
      }
    ],
    series: [
      {
        name: '邮件营销',
        type: 'line',
        stack: '总量',
        areaStyle: { normal: {} },
        data: [120, 132, 101, 134, 90, 230, 210]
      },
      {
        name: '联盟广告',
        type: 'line',
        stack: '总量',
        areaStyle: { normal: {} },
        data: [220, 182, 191, 234, 290, 330, 310]
      },
      {
        name: '视频广告',
        type: 'line',
        stack: '总量',
        areaStyle: { normal: {} },
        data: [150, 232, 201, 154, 190, 330, 410]
      },
      {
        name: '直接访问',
        type: 'line',
        stack: '总量',
        areaStyle: { normal: {} },
        data: [320, 332, 301, 334, 390, 330, 320]
      },
      {
        name: '搜索引擎',
        type: 'line',
        stack: '总量',
        label: {
          normal: {
            show: true,
            position: 'top'
          }
        },
        areaStyle: { normal: {} },
        data: [820, 932, 901, 934, 1290, 1330, 1320]
      }
    ]
  };

  getRandom(seed) {
    return Math.floor(Math.random() * seed);
  }

  constructor(private es: NgxEchartsService) {
    for (let i = 9; i < 23; i = i + 1) {
      this.hours.push(`${i}:00-${i + 1}: 59`);
    }

    for (let i = 0; i < 15; i++) {
      for (let j = 0; j < 7; j++) {
        this.data.push([i, j, this.getRandom(1000)]);
      }
    }

    this.chartOption3D.xAxis3D.data = this.hours;
    this.chartOption3D.yAxis3D.data = this.days;

    var seek_series = this.chartOption3D.series.find(x => x.type == 'bar3D');
    seek_series.data = this.data.map(function (item) {
      return {
        value: [item[0], item[1], item[2]]
      };
    });
  }

  onChartInit(ec) {
    this.echartsIntance = ec;
  }

  handleChange(checked: boolean, tag: string): void {
    if (checked) {
      this.days.push(tag);
    } else {
      this.days = this.days.filter(t => t !== tag);
    }
    console.log('You are interested in: ', this.days);
    this.chartOption3D.xAxis3D.data = this.hours;
    this.chartOption3D.yAxis3D.data = this.days;

    console.log(this.echartsIntance);
    this.echartsIntance.resize();
    // this.chart.nativeElement.update();
  }


}
